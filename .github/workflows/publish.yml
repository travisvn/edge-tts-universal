name: Publish Package

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (leave empty to use current version)'
        required: false
        type: string
      npm:
        description: 'Publish to npm'
        required: false
        default: true
        type: boolean
      jsr:
        description: 'Publish to JSR'
        required: false
        default: true
        type: boolean
      github:
        description: 'Publish to GitHub Packages'
        required: false
        default: false
        type: boolean
      tag:
        description: 'Distribution tag (latest, beta, alpha, etc.)'
        required: false
        default: 'latest'
        type: string

jobs:
  test:
    name: Test Before Publishing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npm run type-check

      - name: Lint
        run: npm run lint

      - name: Build package
        run: npm run build

      - name: Test Node.js
        run: npm test
        continue-on-error: true

      - name: Test Deno
        run: deno task test
        continue-on-error: true

      - name: Test Bun
        run: bun test
        continue-on-error: true

      - name: Check bundle sizes
        run: npm run size
        continue-on-error: true

  sync-versions:
    name: Sync Versions
    runs-on: ubuntu-latest
    needs: test
    if: github.event.inputs.version != ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Update package.json version
        run: npm version ${{ github.event.inputs.version }} --no-git-tag-version

      - name: Update deno.json version
        run: |
          VERSION="${{ github.event.inputs.version }}"
          sed -i "s/\"version\": \".*\"/\"version\": \"$VERSION\"/" deno.json

      - name: Commit version changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json deno.json
          git commit -m "chore: bump version to ${{ github.event.inputs.version }}" || exit 0
          git push

  publish-npm:
    name: Publish to npm
    runs-on: ubuntu-latest
    needs: [test, sync-versions]
    if: |
      always() && 
      needs.test.result == 'success' && 
      (needs.sync-versions.result == 'success' || needs.sync-versions.result == 'skipped') &&
      (github.event.inputs.npm == 'true' || github.event.inputs.npm == '' || github.event_name == 'release')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build package
        run: npm run build

      - name: Publish to npm (latest)
        if: github.event.inputs.tag == 'latest' || github.event.inputs.tag == '' || github.event_name == 'release'
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish to npm (with tag)
        if: github.event.inputs.tag != 'latest' && github.event.inputs.tag != '' && github.event_name != 'release'
        run: npm publish --access public --tag ${{ github.event.inputs.tag }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-jsr:
    name: Publish to JSR
    runs-on: ubuntu-latest
    needs: [test, sync-versions]
    if: |
      always() && 
      needs.test.result == 'success' && 
      (needs.sync-versions.result == 'success' || needs.sync-versions.result == 'skipped') &&
      (github.event.inputs.jsr == 'true' || github.event.inputs.jsr == '' || github.event_name == 'release')
    permissions:
      contents: read
      id-token: write # The OIDC JWT token will be requested through this audience value.
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Publish to JSR (latest)
        if: github.event.inputs.tag == 'latest' || github.event.inputs.tag == '' || github.event_name == 'release'
        run: deno publish --no-check

      - name: Publish to JSR (with tag)
        if: github.event.inputs.tag != 'latest' && github.event.inputs.tag != '' && github.event_name != 'release'
        run: deno publish --tag ${{ github.event.inputs.tag }} --no-check

  publish-github:
    name: Publish to GitHub Packages
    runs-on: ubuntu-latest
    needs: [test, sync-versions]
    if: |
      always() && 
      needs.test.result == 'success' && 
      (needs.sync-versions.result == 'success' || needs.sync-versions.result == 'skipped') &&
      github.event.inputs.github == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@${{ github.repository_owner }}'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build package
        run: npm run build

      - name: Configure package for GitHub Packages
        run: |
          # Update package name to include scope for GitHub Packages
          npm pkg set name="@${{ github.repository_owner }}/edge-tts-universal"
          npm pkg set publishConfig.registry="https://npm.pkg.github.com"

      - name: Publish to GitHub Packages
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  post-publish:
    name: Post-Publish Tasks
    runs-on: ubuntu-latest
    needs: [publish-npm, publish-jsr, publish-github]
    if: always() && (needs.publish-npm.result == 'success' || needs.publish-jsr.result == 'success')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create GitHub Release (if manual dispatch)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.version != ''
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.event.inputs.version }}
          release_name: Release v${{ github.event.inputs.version }}
          body: |
            ## What's Changed

            Published to:
            ${{ needs.publish-npm.result == 'success' && '- ‚úÖ npm' || '- ‚ùå npm' }}
            ${{ needs.publish-jsr.result == 'success' && '- ‚úÖ JSR' || '- ‚ùå JSR' }}
            ${{ needs.publish-github.result == 'success' && '- ‚úÖ GitHub Packages' || '' }}

            **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ github.event.inputs.version }}...HEAD
          draft: false
          prerelease: ${{ github.event.inputs.tag != 'latest' && github.event.inputs.tag != '' }}

      - name: Update README badges (optional)
        run: |
          echo "üì¶ Package published successfully!"
          echo "npm: https://www.npmjs.com/package/edge-tts-universal"
          echo "JSR: https://jsr.io/@edge-tts/universal"
          echo "GitHub: https://github.com/${{ github.repository }}/packages"
        continue-on-error: true
